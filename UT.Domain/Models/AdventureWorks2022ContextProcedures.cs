// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using UT.Domain.Models;

namespace UT.Domain.Models
{
    public partial class AdventureWorks2022Context
    {
        private IAdventureWorks2022ContextProcedures _procedures;

        public virtual IAdventureWorks2022ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AdventureWorks2022ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAdventureWorks2022ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class AdventureWorks2022ContextProcedures : IAdventureWorks2022ContextProcedures
    {
        private readonly AdventureWorks2022Context _context;

        public AdventureWorks2022ContextProcedures(AdventureWorks2022Context context)
        {
            _context = context;
        }

        public virtual async Task<List<uspGetBillOfMaterialsResult>> uspGetBillOfMaterialsAsync(int? StartProductID, DateTime? CheckDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartProductID",
                    Value = StartProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CheckDate",
                    Value = CheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetBillOfMaterialsResult>("EXEC @returnValue = [dbo].[uspGetBillOfMaterials] @StartProductID = @StartProductID, @CheckDate = @CheckDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspGetEmployeeManagersResult>> uspGetEmployeeManagersAsync(int? BusinessEntityID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BusinessEntityID",
                    Value = BusinessEntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetEmployeeManagersResult>("EXEC @returnValue = [dbo].[uspGetEmployeeManagers] @BusinessEntityID = @BusinessEntityID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspGetManagerEmployeesResult>> uspGetManagerEmployeesAsync(int? BusinessEntityID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BusinessEntityID",
                    Value = BusinessEntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetManagerEmployeesResult>("EXEC @returnValue = [dbo].[uspGetManagerEmployees] @BusinessEntityID = @BusinessEntityID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspGetWhereUsedProductIDResult>> uspGetWhereUsedProductIDAsync(int? StartProductID, DateTime? CheckDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartProductID",
                    Value = StartProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CheckDate",
                    Value = CheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetWhereUsedProductIDResult>("EXEC @returnValue = [dbo].[uspGetWhereUsedProductID] @StartProductID = @StartProductID, @CheckDate = @CheckDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspLogErrorAsync(OutputParameter<int?> ErrorLogID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorLogID = new SqlParameter
            {
                ParameterName = "ErrorLogID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorLogID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterErrorLogID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspLogError] @ErrorLogID = @ErrorLogID OUTPUT", sqlParameters, cancellationToken);

            ErrorLogID?.SetValue(parameterErrorLogID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspPrintErrorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspPrintError]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspSearchCandidateResumesResult>> uspSearchCandidateResumesAsync(string searchString, bool? useInflectional, bool? useThesaurus, int? language, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "searchString",
                    Size = 2000,
                    Value = searchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "useInflectional",
                    Value = useInflectional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "useThesaurus",
                    Value = useThesaurus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "language",
                    Value = language ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspSearchCandidateResumesResult>("EXEC @returnValue = [dbo].[uspSearchCandidateResumes] @searchString = @searchString, @useInflectional = @useInflectional, @useThesaurus = @useThesaurus, @language = @language", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspUpdateEmployeeHireInfoAsync(int? BusinessEntityID, string JobTitle, DateTime? HireDate, DateTime? RateChangeDate, decimal? Rate, byte? PayFrequency, bool? CurrentFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BusinessEntityID",
                    Value = BusinessEntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "JobTitle",
                    Size = 100,
                    Value = JobTitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HireDate",
                    Value = HireDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RateChangeDate",
                    Value = RateChangeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Rate",
                    Precision = 19,
                    Scale = 4,
                    Value = Rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "PayFrequency",
                    Value = PayFrequency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentFlag",
                    Value = CurrentFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [HumanResources].[uspUpdateEmployeeHireInfo] @BusinessEntityID = @BusinessEntityID, @JobTitle = @JobTitle, @HireDate = @HireDate, @RateChangeDate = @RateChangeDate, @Rate = @Rate, @PayFrequency = @PayFrequency, @CurrentFlag = @CurrentFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspUpdateEmployeeLoginAsync(int? BusinessEntityID, byte[] OrganizationNode, string LoginID, string JobTitle, DateTime? HireDate, bool? CurrentFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BusinessEntityID",
                    Value = BusinessEntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationNode",
                    Value = OrganizationNode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Udt,
                    UdtTypeName = "hierarchyid",
                },
                new SqlParameter
                {
                    ParameterName = "LoginID",
                    Size = 512,
                    Value = LoginID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "JobTitle",
                    Size = 100,
                    Value = JobTitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HireDate",
                    Value = HireDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentFlag",
                    Value = CurrentFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [HumanResources].[uspUpdateEmployeeLogin] @BusinessEntityID = @BusinessEntityID, @OrganizationNode = @OrganizationNode, @LoginID = @LoginID, @JobTitle = @JobTitle, @HireDate = @HireDate, @CurrentFlag = @CurrentFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspUpdateEmployeePersonalInfoAsync(int? BusinessEntityID, string NationalIDNumber, DateTime? BirthDate, string MaritalStatus, string Gender, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BusinessEntityID",
                    Value = BusinessEntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NationalIDNumber",
                    Size = 30,
                    Value = NationalIDNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Size = 2,
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 2,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID = @BusinessEntityID, @NationalIDNumber = @NationalIDNumber, @BirthDate = @BirthDate, @MaritalStatus = @MaritalStatus, @Gender = @Gender", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
